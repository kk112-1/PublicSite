(()=>{var e={584:e=>{e.exports=function(e,t){return Array.prototype.slice.call(e,t)}},514:(e,t,n)=>{"use strict";var r=n(115);e.exports=function(e,t,n){e&&r((function(){e.apply(n||null,t||[])}))}},229:(e,t,n)=>{"use strict";var r=n(584),i=n(514);e.exports=function(e,t){var n=t||{},o={};return void 0===e&&(e={}),e.on=function(t,n){return o[t]?o[t].push(n):o[t]=[n],e},e.once=function(t,n){return n._once=!0,e.on(t,n),e},e.off=function(t,n){var r=arguments.length;if(1===r)delete o[t];else if(0===r)o={};else{var i=o[t];if(!i)return e;i.splice(i.indexOf(n),1)}return e},e.emit=function(){var t=r(arguments);return e.emitterSnapshot(t.shift()).apply(this,t)},e.emitterSnapshot=function(t){var s=(o[t]||[]).slice(0);return function(){var o=r(arguments),a=this||e;if("error"===t&&!1!==n.throws&&!s.length)throw 1===o.length?o[0]:o;return s.forEach((function(r){n.async?i(r,o,a):r.apply(a,o),r._once&&e.off(t,r)})),e}},e}},808:(e,t,n)=>{"use strict";var r=n(638),i=n(874),o=n.g.document,s=function(e,t,n,r){return e.addEventListener(t,n,r)},a=function(e,t,n,r){return e.removeEventListener(t,n,r)},c=[];function u(e,t,n){var r=function(e,t,n){var r,i;for(r=0;r<c.length;r++)if((i=c[r]).element===e&&i.type===t&&i.fn===n)return r}(e,t,n);if(r){var i=c[r].wrapper;return c.splice(r,1),i}}n.g.addEventListener||(s=function(e,t,r){return e.attachEvent("on"+t,function(e,t,r){var i=u(e,t,r)||function(e,t,r){return function(t){var i=t||n.g.event;i.target=i.target||i.srcElement,i.preventDefault=i.preventDefault||function(){i.returnValue=!1},i.stopPropagation=i.stopPropagation||function(){i.cancelBubble=!0},i.which=i.which||i.keyCode,r.call(e,i)}}(e,0,r);return c.push({wrapper:i,element:e,type:t,fn:r}),i}(e,t,r))},a=function(e,t,n){var r=u(e,t,n);if(r)return e.detachEvent("on"+t,r)}),e.exports={add:s,remove:a,fabricate:function(e,t,n){var s=-1===i.indexOf(t)?new r(t,{detail:n}):function(){var e;return o.createEvent?(e=o.createEvent("Event")).initEvent(t,!0,!0):o.createEventObject&&(e=o.createEventObject()),e}();e.dispatchEvent?e.dispatchEvent(s):e.fireEvent("on"+t,s)}}},874:(e,t,n)=>{"use strict";var r=[],i="",o=/^on/;for(i in n.g)o.test(i)&&r.push(i.slice(2));e.exports=r},638:(e,t,n)=>{var r=n.g.CustomEvent;e.exports=function(){try{var e=new r("cat",{detail:{foo:"bar"}});return"cat"===e.type&&"bar"===e.detail.foo}catch(e){}return!1}()?r:"undefined"!=typeof document&&"function"==typeof document.createEvent?function(e,t){var n=document.createEvent("CustomEvent");return t?n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail):n.initCustomEvent(e,!1,!1,void 0),n}:function(e,t){var n=document.createEventObject();return n.type=e,t?(n.bubbles=Boolean(t.bubbles),n.cancelable=Boolean(t.cancelable),n.detail=t.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}},425:e=>{"use strict";var t={};function n(e){var n=t[e];return n?n.lastIndex=0:t[e]=n=new RegExp("(?:^|\\s)"+e+"(?:\\s|$)","g"),n}e.exports={add:function(e,t){var r=e.className;r.length?n(t).test(r)||(e.className+=" "+t):e.className=t},rm:function(e,t){e.className=e.className.replace(n(t)," ").trim()}}},137:(e,t,n)=>{"use strict";var r=n(229),i=n(808),o=n(425),s=document,a=s.documentElement;function c(e,t,r,o){n.g.navigator.pointerEnabled?i[t](e,{mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"}[r],o):n.g.navigator.msPointerEnabled?i[t](e,{mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"}[r],o):(i[t](e,{mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"}[r],o),i[t](e,r,o))}function u(e){if(void 0!==e.touches)return e.touches.length;if(void 0!==e.which&&0!==e.which)return e.which;if(void 0!==e.buttons)return e.buttons;var t=e.button;return void 0!==t?1&t?1:2&t?3:4&t?2:0:void 0}function l(e){var t=e.getBoundingClientRect();return{left:t.left+d("scrollLeft","pageXOffset"),top:t.top+d("scrollTop","pageYOffset")}}function d(e,t){return void 0!==n.g[t]?n.g[t]:a.clientHeight?a[e]:s.body[e]}function f(e,t,n){var r,i=(e=e||{}).className||"";return e.className+=" gu-hide",r=s.elementFromPoint(t,n),e.className=i,r}function h(){return!1}function v(){return!0}function m(e){return e.width||e.right-e.left}function p(e){return e.height||e.bottom-e.top}function g(e){return e.parentNode===s?null:e.parentNode}function y(e){return"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||b(e)}function b(e){return!!e&&"false"!==e.contentEditable&&("true"===e.contentEditable||b(g(e)))}function k(e){return e.nextElementSibling||function(){var t=e;do{t=t.nextSibling}while(t&&1!==t.nodeType);return t}()}function E(e,t){var n=function(e){return e.targetTouches&&e.targetTouches.length?e.targetTouches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e}(t),r={pageX:"clientX",pageY:"clientY"};return e in r&&!(e in n)&&r[e]in n&&(e=r[e]),n[e]}e.exports=function(e,t){var n,d,b,w,C,S,T,L,D,x,O,B=arguments.length;1===B&&!1===Array.isArray(e)&&(t=e,e=[]);var I,N=null,A=t||{};void 0===A.moves&&(A.moves=v),void 0===A.accepts&&(A.accepts=v),void 0===A.invalid&&(A.invalid=z),void 0===A.containers&&(A.containers=e||[]),void 0===A.isContainer&&(A.isContainer=h),void 0===A.copy&&(A.copy=!1),void 0===A.copySortSource&&(A.copySortSource=!1),void 0===A.revertOnSpill&&(A.revertOnSpill=!1),void 0===A.removeOnSpill&&(A.removeOnSpill=!1),void 0===A.direction&&(A.direction="vertical"),void 0===A.ignoreInputTextSelection&&(A.ignoreInputTextSelection=!0),void 0===A.mirrorContainer&&(A.mirrorContainer=s.body);var R=r({containers:A.containers,start:$,end:G,cancel:Z,remove:W,destroy:M,canMove:K,dragging:!1});return!0===A.removeOnSpill&&R.on("over",ie).on("out",oe),P(),R;function X(e){return-1!==R.containers.indexOf(e)||A.isContainer(e)}function P(e){var t=e?"remove":"add";c(a,t,"mousedown",V),c(a,t,"mouseup",q)}function Y(e){c(a,e?"remove":"add","mousemove",U)}function j(e){var t=e?"remove":"add";i[t](a,"selectstart",F),i[t](a,"click",F)}function M(){P(!0),q({})}function F(e){I&&e.preventDefault()}function V(e){if(S=e.clientX,T=e.clientY,1===u(e)&&!e.metaKey&&!e.ctrlKey){var t=e.target,n=_(t);n&&(I=n,Y(),"mousedown"===e.type&&(y(t)?t.focus():e.preventDefault()))}}function U(e){if(I)if(0!==u(e)){if(!(void 0!==e.clientX&&Math.abs(e.clientX-S)<=(A.slideFactorX||0)&&void 0!==e.clientY&&Math.abs(e.clientY-T)<=(A.slideFactorY||0))){if(A.ignoreInputTextSelection){var t=E("clientX",e)||0,n=E("clientY",e)||0;if(y(s.elementFromPoint(t,n)))return}var r=I;Y(!0),j(),G(),J(r);var i=l(b);w=E("pageX",e)-i.left,C=E("pageY",e)-i.top,o.add(x||b,"gu-transit"),se(),re(e)}}else q({})}function _(e){if(!(R.dragging&&n||X(e))){for(var t=e;g(e)&&!1===X(g(e));){if(A.invalid(e,t))return;if(!(e=g(e)))return}var r=g(e);if(r&&!A.invalid(e,t)&&A.moves(e,r,t,k(e)))return{item:e,source:r}}}function K(e){return!!_(e)}function $(e){var t=_(e);t&&J(t)}function J(e){le(e.item,e.source)&&(x=e.item.cloneNode(!0),R.emit("cloned",x,e.item,"copy")),d=e.source,b=e.item,L=D=k(e.item),R.dragging=!0,R.emit("drag",b,d)}function z(){return!1}function G(){if(R.dragging){var e=x||b;Q(e,g(e))}}function H(){I=!1,Y(!0),j(!0)}function q(e){if(H(),R.dragging){var t=x||b,r=E("clientX",e)||0,i=E("clientY",e)||0,o=ne(f(n,r,i),r,i);o&&(x&&A.copySortSource||!x||o!==d)?Q(t,o):A.removeOnSpill?W():Z()}}function Q(e,t){var n=g(e);x&&A.copySortSource&&t===d&&n.removeChild(b),te(t)?R.emit("cancel",e,d,d):R.emit("drop",e,t,d,D),ee()}function W(){if(R.dragging){var e=x||b,t=g(e);t&&t.removeChild(e),R.emit(x?"cancel":"remove",e,t,d),ee()}}function Z(e){if(R.dragging){var t=arguments.length>0?e:A.revertOnSpill,n=x||b,r=g(n),i=te(r);!1===i&&t&&(x?r&&r.removeChild(x):d.insertBefore(n,L)),i||t?R.emit("cancel",n,d,d):R.emit("drop",n,r,d,D),ee()}}function ee(){var e=x||b;H(),ae(),e&&o.rm(e,"gu-transit"),O&&clearTimeout(O),R.dragging=!1,N&&R.emit("out",e,N,d),R.emit("dragend",e),d=b=x=L=D=O=N=null}function te(e,t){var r;return r=void 0!==t?t:n?D:k(x||b),e===d&&r===L}function ne(e,t,n){for(var r=e;r&&!i();)r=g(r);return r;function i(){if(!1===X(r))return!1;var i=ce(r,e),o=ue(r,i,t,n);return!!te(r,o)||A.accepts(b,r,d,o)}}function re(e){if(n){e.preventDefault();var t=E("clientX",e)||0,r=E("clientY",e)||0,i=t-w,o=r-C;n.style.left=i+"px",n.style.top=o+"px";var s=x||b,a=f(n,t,r),c=ne(a,t,r),u=null!==c&&c!==N;(u||null===c)&&(N&&m("out"),N=c,u&&m("over"));var l=g(s);if(c!==d||!x||A.copySortSource){var h,v=ce(c,a);if(null!==v)h=ue(c,v,t,r);else{if(!0!==A.revertOnSpill||x)return void(x&&l&&l.removeChild(s));h=L,c=d}(null===h&&u||h!==s&&h!==k(s))&&(D=h,c.insertBefore(s,h),R.emit("shadow",s,c,d))}else l&&l.removeChild(s)}function m(e){R.emit(e,s,N,d)}}function ie(e){o.rm(e,"gu-hide")}function oe(e){R.dragging&&o.add(e,"gu-hide")}function se(){if(!n){var e=b.getBoundingClientRect();(n=b.cloneNode(!0)).style.width=m(e)+"px",n.style.height=p(e)+"px",o.rm(n,"gu-transit"),o.add(n,"gu-mirror"),A.mirrorContainer.appendChild(n),c(a,"add","mousemove",re),o.add(A.mirrorContainer,"gu-unselectable"),R.emit("cloned",n,b,"mirror")}}function ae(){n&&(o.rm(A.mirrorContainer,"gu-unselectable"),c(a,"remove","mousemove",re),g(n).removeChild(n),n=null)}function ce(e,t){for(var n=t;n!==e&&g(n)!==e;)n=g(n);return n===a?null:n}function ue(e,t,n,r){var i,o="horizontal"===A.direction,s=t!==e?(i=t.getBoundingClientRect(),a(o?n>i.left+m(i)/2:r>i.top+p(i)/2)):function(){var t,i,s,a=e.children.length;for(t=0;t<a;t++){if(s=(i=e.children[t]).getBoundingClientRect(),o&&s.left+s.width/2>n)return i;if(!o&&s.top+s.height/2>r)return i}return null}();return s;function a(e){return e?k(t):t}}function le(e,t){return"boolean"==typeof A.copy?A.copy:A.copy(e,t)}}},115:e=>{var t;t="function"==typeof setImmediate?function(e){setImmediate(e)}:function(e){setTimeout(e,0)},e.exports=t}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e,t=new Uint8Array(16);function r(){if(!e&&!(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(t)}const i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(e){return"string"==typeof e&&i.test(e)};for(var s=[],a=0;a<256;++a)s.push((a+256).toString(16).substr(1));const c=function(e,t,n){var i=(e=e||{}).random||(e.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=i[a];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!o(n))throw TypeError("Stringified UUID is invalid");return n}(i)};class u{constructor(){this.listener={}}add(e,t,n,r=c()){this.listener[r]={event:e,element:t,handler:n},t.addEventListener(e,n)}remove(e){const t=this.listener[e];t&&(t.element.removeEventListener(t.event,t.handler),delete this.listener[e])}}const l={Todo:"TODO",Doing:"DOING",Done:"DONE"};class d{constructor(e){this.id=e.id||c(),this.title=e.title,this.status=e.status||l.Todo}update(e){this.title=e.title||this.title,this.status=e.status||this.status}static validate(e){return!!(e&&o(e.id)&&e.title&&Object.values(l).includes(e.status))}}const f="TASKS";class h{constructor(){this.tasks=[],this.storage=localStorage,this.tasks=this.getStorageTask()}add(e){this.tasks.push(e),this.updateStorage()}delete(e){this.tasks=this.tasks.filter((({id:t})=>t!==e.id)),this.updateStorage()}find(e){return this.tasks.find((t=>t.id===e))}update(e){this.tasks=this.tasks.map((t=>t.id===e.id?e:t))}filter(e){return this.tasks.filter((({status:t})=>t===e))}updateStorage(){this.storage.setItem(f,JSON.stringify(this.tasks))}getStorageTask(){const e=this.storage.getItem(f);if(!e)return[];try{const t=JSON.parse(e);return function(e){if(!Array.isArray(e)||!e.every((e=>d.validate(e))))throw new Error("引数「value」はTaskObject型と一致しません。")}(t),t.map((e=>new d(e)))}catch(e){return this.storage.removeItem(f),[]}}moveAboveTarget(e,t){const n=this.tasks.indexOf(e),r=this.tasks.indexOf(t);this.changeOrder(e,n,n<r?r-1:r)}moveToLast(e){const t=this.tasks.indexOf(e);this.changeOrder(e,t,this.tasks.length)}changeOrder(e,t,n){this.tasks.splice(t,1),this.tasks.splice(n,0,e),this.updateStorage()}}var v=n(137),m=n.n(v);class p{constructor(e,t,n){this.todoList=e,this.doingList=t,this.doneList=n}renderAll(e){return[...this.renderList(e.filter(l.Todo),this.todoList),...this.renderList(e.filter(l.Doing),this.doingList),...this.renderList(e.filter(l.Done),this.doneList)]}renderList(e,t){if(0===e.length)return[];const n=[];return e.forEach((e=>{const{taskEl:r,deleteButtonEl:i}=this.render(e);t.append(r),n.push({task:e,deleteButtonEl:i})})),n}append(e){const{taskEl:t,deleteButtonEl:n}=this.render(e);return this.todoList.append(t),{deleteButtonEl:n}}render(e){const t=document.createElement("div"),n=document.createElement("span"),r=document.createElement("button");return t.id=e.id,t.classList.add("task-item"),n.textContent=e.title,r.textContent="削除",t.append(n,r),{taskEl:t,deleteButtonEl:r}}remove(e){const t=document.getElementById(e.id);if(t)switch(e.status){case l.Todo:this.todoList.removeChild(t);break;case l.Doing:this.doingList.removeChild(t);break;case l.Done:this.doneList.removeChild(t)}}subscribeDragAndDrop(e){m()([this.todoList,this.doingList,this.doneList]).on("drop",((t,n,r,i)=>{console.log(t),console.log(n),console.log(r),console.log(i);let o=null;switch(n.id){case"todoist":o=l.Todo;break;case"doingList":o=l.Doing;break;case"doneList":o=l.Done}o&&e(t,i,o)}))}getId(e){return e.id}}class g{constructor(){this.eventListener=new u,this.taskCollection=new h,this.taskRenderer=new p(document.getElementById("todoList"),document.getElementById("doingList"),document.getElementById("doneList")),this.handleSubmit=e=>{e.preventDefault();const t=document.getElementById("title");if(!t)return;const n=new d({title:t.value});this.taskCollection.add(n);const{deleteButtonEl:r}=this.taskRenderer.append(n);this.eventListener.add("click",r,(()=>this.handleClickDeleteTask(n)),n.id),t.value=""},this.handleClickDeleteAllDoneTasks=()=>{window.confirm("DONE のタスクを一括で削除してもよろしいですか？")&&this.taskCollection.filter(l.Done).forEach((e=>this.executeDeleteTask(e)))},this.executeDeleteTask=e=>{this.eventListener.remove(e.id),this.taskCollection.delete(e),this.taskRenderer.remove(e)},this.handleDragAndDrop=(e,t,n)=>{const r=this.taskRenderer.getId(e);if(!r)return;const i=this.taskCollection.find(r);if(i)if(i.update({status:n}),this.taskCollection.update(i),t){const e=this.taskRenderer.getId(t);if(!e)return;const n=this.taskCollection.find(e);if(!n)return;this.taskCollection.moveAboveTarget(i,n)}else this.taskCollection.moveToLast(i)}}start(){const e=this.taskRenderer.renderAll(this.taskCollection),t=document.getElementById("createForm");e.forEach((({task:e,deleteButtonEl:t})=>{this.eventListener.add("click",t,(()=>this.handleClickDeleteTask(e)),e.id)}));const n=document.getElementById("deleteAllDoneTask");this.eventListener.add("click",n,this.handleClickDeleteAllDoneTasks),this.eventListener.add("submit",t,this.handleSubmit),this.taskRenderer.subscribeDragAndDrop(this.handleDragAndDrop)}handleClickDeleteTask(e){window.confirm(`「${e.title}」を削除してもよろしいですか？`)&&(this.eventListener.remove(e.id),this.taskCollection.delete(e),this.taskRenderer.remove(e))}}window.addEventListener("load",(()=>{(new g).start()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,